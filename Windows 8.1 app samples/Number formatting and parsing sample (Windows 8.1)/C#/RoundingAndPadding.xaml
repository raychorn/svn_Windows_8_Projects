<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->

    <common:LayoutAwarePage
    x:Class="NumberFormatting.RoundingAndPadding"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:$rootsnamespace$"
    xmlns:common="using:SDKTemplate.Common"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

        <Grid x:Name="LayoutRoot" Background="White">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <Grid x:Name="Input" Grid.Row="0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <TextBlock x:Name="InputTextBlock1" Grid.Row="0" TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left">
                This scenario demonstrates how to pad and round numbers using the different rounding algorithms and formatting classes.  The code demonstrates how to pad a number using only significant digits, as well as with minimum fractional and integer digits.  Use of the two types of rounding classes and algorithms show how a number can be rounded by it's own, as well as in conjunction with the formatting classes.
                <LineBreak/>
            </TextBlock>
                <Button x:Name="Display" Grid.Row="1" Content="Display" Margin="0,0,10,0" Click="Display_Click"/>
            </Grid>

            <Grid x:Name="Output" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Row="1">
            </Grid>

            <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts -->
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup>
                    <VisualState x:Name="DefaultLayout"/>
                    <VisualState x:Name="Below768Layout"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>

        </Grid>
    </common:LayoutAwarePage>
