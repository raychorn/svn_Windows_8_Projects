<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
//
//*********************************************************
-->
<common:LayoutAwarePage
    x:Class="MediaExtensions.VideoEffect"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:MediaExtensions"
    xmlns:common="using:SDKTemplate.Common"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid x:Name="LayoutRoot" Background="White" HorizontalAlignment="Left" VerticalAlignment="Top">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid x:Name="Input" Grid.Row="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <TextBlock x:Name="InputTextBlock1"  TextWrapping="Wrap" Grid.Row="0" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left" >
                A media effect allows an application to process uncompressed audio and video streams before it reaches the rendering engine. 
                The below example demonstrates how to modify a video image before it is rendered by the playback engine.
            </TextBlock>
            <StackPanel Orientation="Vertical" Margin="0,10,0,0" Grid.Row="1">
                <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
                    <Button x:Name="OpenGrayscale" Content="Play Video (Grayscale)" Margin="0,0,10,0" Click="OpenGrayscale_Click"/>
                    <Button x:Name="OpenFisheye" Content="Play Video (Fisheye)" Margin="0,0,10,0" Click="OpenFisheye_Click"/>
                    <Button x:Name="OpenPinch" Content="Play Video (Pinch)" Margin="0,0,10,0" Click="OpenPinch_Click"/>
                </StackPanel>
                <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
                    <Button x:Name="OpenWarp" Content="Play Video (Warp)" Margin="0,0,10,0" Click="OpenWarp_Click"/>
                    <Button x:Name="OpenInvert" Content="Play Video (Invert)" Margin="0,0,10,0" Click="OpenInvert_Click"/>
                    <Button x:Name="Stop" Content="Stop Video" Margin="0,0,10,0" Click="Stop_Click"/>
                </StackPanel>
            </StackPanel>

            <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts for the input section -->
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup>
                    <VisualState x:Name="InputFullScreenLandscape"/>
                    <VisualState x:Name="InputFilled"/>
                    <VisualState x:Name="InputFullScreenPortrait"/>
                    <VisualState x:Name="InputSnapped"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>

        <Grid x:Name="Output" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Row="1">
            <StackPanel Orientation="Vertical">
                <TextBlock Style="{StaticResource BasicTextStyle}" TextWrapping="Wrap" Text="The video will be playing in a single window with the video effect applied to it."/>
                <MediaElement x:Name="Video" Width="320" Height="240" HorizontalAlignment="Left" />
            </StackPanel>

            <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts for the output section -->
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup>
                    <VisualState x:Name="OutputFullScreenLandscape"/>
                    <VisualState x:Name="OutputFilled"/>
                    <VisualState x:Name="OutputFullScreenPortrait"/>
                    <VisualState x:Name="OutputSnapped"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
     </Grid>
</common:LayoutAwarePage>
